import { __extends } from "tslib";
import { CodeBuildClient } from "./CodeBuildClient";
import { BatchDeleteBuildsCommand, } from "./commands/BatchDeleteBuildsCommand";
import { BatchGetBuildBatchesCommand, } from "./commands/BatchGetBuildBatchesCommand";
import { BatchGetBuildsCommand, } from "./commands/BatchGetBuildsCommand";
import { BatchGetProjectsCommand, } from "./commands/BatchGetProjectsCommand";
import { BatchGetReportGroupsCommand, } from "./commands/BatchGetReportGroupsCommand";
import { BatchGetReportsCommand, } from "./commands/BatchGetReportsCommand";
import { CreateProjectCommand, } from "./commands/CreateProjectCommand";
import { CreateReportGroupCommand, } from "./commands/CreateReportGroupCommand";
import { CreateWebhookCommand, } from "./commands/CreateWebhookCommand";
import { DeleteBuildBatchCommand, } from "./commands/DeleteBuildBatchCommand";
import { DeleteProjectCommand, } from "./commands/DeleteProjectCommand";
import { DeleteReportCommand, } from "./commands/DeleteReportCommand";
import { DeleteReportGroupCommand, } from "./commands/DeleteReportGroupCommand";
import { DeleteResourcePolicyCommand, } from "./commands/DeleteResourcePolicyCommand";
import { DeleteSourceCredentialsCommand, } from "./commands/DeleteSourceCredentialsCommand";
import { DeleteWebhookCommand, } from "./commands/DeleteWebhookCommand";
import { DescribeCodeCoveragesCommand, } from "./commands/DescribeCodeCoveragesCommand";
import { DescribeTestCasesCommand, } from "./commands/DescribeTestCasesCommand";
import { GetReportGroupTrendCommand, } from "./commands/GetReportGroupTrendCommand";
import { GetResourcePolicyCommand, } from "./commands/GetResourcePolicyCommand";
import { ImportSourceCredentialsCommand, } from "./commands/ImportSourceCredentialsCommand";
import { InvalidateProjectCacheCommand, } from "./commands/InvalidateProjectCacheCommand";
import { ListBuildBatchesCommand, } from "./commands/ListBuildBatchesCommand";
import { ListBuildBatchesForProjectCommand, } from "./commands/ListBuildBatchesForProjectCommand";
import { ListBuildsCommand } from "./commands/ListBuildsCommand";
import { ListBuildsForProjectCommand, } from "./commands/ListBuildsForProjectCommand";
import { ListCuratedEnvironmentImagesCommand, } from "./commands/ListCuratedEnvironmentImagesCommand";
import { ListProjectsCommand, } from "./commands/ListProjectsCommand";
import { ListReportGroupsCommand, } from "./commands/ListReportGroupsCommand";
import { ListReportsCommand } from "./commands/ListReportsCommand";
import { ListReportsForReportGroupCommand, } from "./commands/ListReportsForReportGroupCommand";
import { ListSharedProjectsCommand, } from "./commands/ListSharedProjectsCommand";
import { ListSharedReportGroupsCommand, } from "./commands/ListSharedReportGroupsCommand";
import { ListSourceCredentialsCommand, } from "./commands/ListSourceCredentialsCommand";
import { PutResourcePolicyCommand, } from "./commands/PutResourcePolicyCommand";
import { RetryBuildBatchCommand, } from "./commands/RetryBuildBatchCommand";
import { RetryBuildCommand } from "./commands/RetryBuildCommand";
import { StartBuildBatchCommand, } from "./commands/StartBuildBatchCommand";
import { StartBuildCommand } from "./commands/StartBuildCommand";
import { StopBuildBatchCommand, } from "./commands/StopBuildBatchCommand";
import { StopBuildCommand } from "./commands/StopBuildCommand";
import { UpdateProjectCommand, } from "./commands/UpdateProjectCommand";
import { UpdateProjectVisibilityCommand, } from "./commands/UpdateProjectVisibilityCommand";
import { UpdateReportGroupCommand, } from "./commands/UpdateReportGroupCommand";
import { UpdateWebhookCommand, } from "./commands/UpdateWebhookCommand";
var CodeBuild = (function (_super) {
    __extends(CodeBuild, _super);
    function CodeBuild() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CodeBuild.prototype.batchDeleteBuilds = function (args, optionsOrCb, cb) {
        var command = new BatchDeleteBuildsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.batchGetBuildBatches = function (args, optionsOrCb, cb) {
        var command = new BatchGetBuildBatchesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.batchGetBuilds = function (args, optionsOrCb, cb) {
        var command = new BatchGetBuildsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.batchGetProjects = function (args, optionsOrCb, cb) {
        var command = new BatchGetProjectsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.batchGetReportGroups = function (args, optionsOrCb, cb) {
        var command = new BatchGetReportGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.batchGetReports = function (args, optionsOrCb, cb) {
        var command = new BatchGetReportsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.createProject = function (args, optionsOrCb, cb) {
        var command = new CreateProjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.createReportGroup = function (args, optionsOrCb, cb) {
        var command = new CreateReportGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.createWebhook = function (args, optionsOrCb, cb) {
        var command = new CreateWebhookCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteBuildBatch = function (args, optionsOrCb, cb) {
        var command = new DeleteBuildBatchCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteProject = function (args, optionsOrCb, cb) {
        var command = new DeleteProjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteReport = function (args, optionsOrCb, cb) {
        var command = new DeleteReportCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteReportGroup = function (args, optionsOrCb, cb) {
        var command = new DeleteReportGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteResourcePolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteSourceCredentials = function (args, optionsOrCb, cb) {
        var command = new DeleteSourceCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.deleteWebhook = function (args, optionsOrCb, cb) {
        var command = new DeleteWebhookCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.describeCodeCoverages = function (args, optionsOrCb, cb) {
        var command = new DescribeCodeCoveragesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.describeTestCases = function (args, optionsOrCb, cb) {
        var command = new DescribeTestCasesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.getReportGroupTrend = function (args, optionsOrCb, cb) {
        var command = new GetReportGroupTrendCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.getResourcePolicy = function (args, optionsOrCb, cb) {
        var command = new GetResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.importSourceCredentials = function (args, optionsOrCb, cb) {
        var command = new ImportSourceCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.invalidateProjectCache = function (args, optionsOrCb, cb) {
        var command = new InvalidateProjectCacheCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listBuildBatches = function (args, optionsOrCb, cb) {
        var command = new ListBuildBatchesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listBuildBatchesForProject = function (args, optionsOrCb, cb) {
        var command = new ListBuildBatchesForProjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listBuilds = function (args, optionsOrCb, cb) {
        var command = new ListBuildsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listBuildsForProject = function (args, optionsOrCb, cb) {
        var command = new ListBuildsForProjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listCuratedEnvironmentImages = function (args, optionsOrCb, cb) {
        var command = new ListCuratedEnvironmentImagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listProjects = function (args, optionsOrCb, cb) {
        var command = new ListProjectsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listReportGroups = function (args, optionsOrCb, cb) {
        var command = new ListReportGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listReports = function (args, optionsOrCb, cb) {
        var command = new ListReportsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listReportsForReportGroup = function (args, optionsOrCb, cb) {
        var command = new ListReportsForReportGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listSharedProjects = function (args, optionsOrCb, cb) {
        var command = new ListSharedProjectsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listSharedReportGroups = function (args, optionsOrCb, cb) {
        var command = new ListSharedReportGroupsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.listSourceCredentials = function (args, optionsOrCb, cb) {
        var command = new ListSourceCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.putResourcePolicy = function (args, optionsOrCb, cb) {
        var command = new PutResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.retryBuild = function (args, optionsOrCb, cb) {
        var command = new RetryBuildCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.retryBuildBatch = function (args, optionsOrCb, cb) {
        var command = new RetryBuildBatchCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.startBuild = function (args, optionsOrCb, cb) {
        var command = new StartBuildCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.startBuildBatch = function (args, optionsOrCb, cb) {
        var command = new StartBuildBatchCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.stopBuild = function (args, optionsOrCb, cb) {
        var command = new StopBuildCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.stopBuildBatch = function (args, optionsOrCb, cb) {
        var command = new StopBuildBatchCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.updateProject = function (args, optionsOrCb, cb) {
        var command = new UpdateProjectCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.updateProjectVisibility = function (args, optionsOrCb, cb) {
        var command = new UpdateProjectVisibilityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.updateReportGroup = function (args, optionsOrCb, cb) {
        var command = new UpdateReportGroupCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    CodeBuild.prototype.updateWebhook = function (args, optionsOrCb, cb) {
        var command = new UpdateWebhookCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return CodeBuild;
}(CodeBuildClient));
export { CodeBuild };
